package com.ikkong.casher.controller;

import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Map;

import com.ikkong.casher.model.Casherlog;
import com.ikkong.core.base.BaseController;
import com.ikkong.core.dao.Blade;
import com.ikkong.core.jfinal.ext.kit.JsonKit;
import com.ikkong.core.jfinal.ext.shiro.ShiroKit;
import com.ikkong.core.modules.beetl.ShiroExt;
import com.ikkong.core.toolbox.Record;
import com.ikkong.system.controller.base.UrlPermissController;
import com.ikkong.casher.model.Casher;
import com.ikkong.casher.service.CasherService;
import com.ikkong.casher.service.impl.CasherServiceImpl;
import net.sf.ehcache.transaction.ReadCommittedSoftLockFactory;
import org.beetl.sql.core.kit.StringKit;

/**
 * Generated by Blade.
 * 2018-07-23 14:59:02
 */
public class CasherController extends UrlPermissController {
	private static String CODE = "casher";
	private static String PERFIX = "nsl_casher";
	private static String LIST_SOURCE = "Casher.list";
	private static String BASE_PATH = "/platform/casher/";
	
	CasherService service = new CasherServiceImpl();
	
	public void index() {
		setAttr("code", CODE);
		render(BASE_PATH + "casher.html");
	}

	public void casherlog() {
        String cid = getPara("cid", "1");
        setAttr("code", "casherlog");
		setAttr("cid",getPara("cid","1"));
        Casher casher = service.findById(cid);//获取图片
		if(casher != null && StringKit.isNotBlank(casher.getImgs())){
			List<String> strings = Arrays.asList(casher.getImgs().split(","));
			setAttr("imgs",strings);
		}
		if(casher.getU_id() == (int)ShiroKit.getUser().getId()){
			setAttr("mine",true);
		}
		Map map = Blade.dao().selectSingle("Casher.one", Record.create().set("cid", cid), Map.class);
		setAttr("casher",map);

		List<Map> casherlog = Blade.dao().select("Casher.casherlog", Map.class, Record.create().set("cid", cid).set("uid",(int)ShiroKit.getUser().getId()));
		setAttr("casherlog",casherlog);
		setAttr("size",casherlog.size());
		setAttr("status",casher.getStatus());
        render(BASE_PATH + "../casherlog/casher_splog.html");
	}

	public void sp() {
		setAttr("code", CODE);
		render(BASE_PATH + "casher_sp.html");
	}

	public void add() {
		setAttr("code", CODE);
		render(BASE_PATH + "casher_add.html");
	}

	public void edit() {
		String id = getPara(0);
		Casher casher = service.findById(id);
		setAttr("model", JsonKit.toJson(casher));
		setAttr("id", id);
		setAttr("code", CODE);
		render(BASE_PATH + "casher_edit.html");
	}

	public void view() {
		String id = getPara(0);
		Casher casher = service.findById(id);
		String imgs = casher.getImgs();
		if(StringKit.isNotBlank(imgs)){
			setAttr("imgs", Arrays.asList(imgs.split(",")));
		}
		setAttr("code", CODE);
		render(BASE_PATH + "casher_view.html");
	}

	public void list() {
		Object grid = paginate(LIST_SOURCE);
		renderJson(grid);
	}

	public void save() {
		Casher casher = mapping(PERFIX, Casher.class);
		casher.setDate(new Date());
		casher.setU_id((int)ShiroKit.getUser().getId());
		casher.setD_id((int)ShiroKit.getUser().getDeptId());

		casher.setStatus(1);
        List<Map> dept = Blade.dao().select("User.leader", Map.class, Record.create().set("dept", ShiroKit.getUser().getDeptId()));
        String leader = "";
        for(Map map :dept){
            leader =leader + "," + map.get("id").toString();
        }
        casher.setVisible(leader);
        boolean temp = service.save(casher);
		if (temp) {
			renderJson(success(SAVE_SUCCESS_MSG));
		} else {
			renderJson(error(SAVE_FAIL_MSG));
		}
	}

	public void update() {
		Casher casher = mapping(PERFIX, Casher.class);
		String mode = getPara("mode", "");
		if("addman".equals(mode)){
			Integer cid = getParaToInt("cid", 1);
			String addids = getPara("addids");
			String addname = getPara("addname");
			Casher ca = service.findById(cid);
			if(ca!=null){
				String visible = ca.getVisible();
				if(StringKit.isNotBlank(addids)){
					List<String> strings = Arrays.asList(addids.split(","));
					for(String ss:strings){
						if(!visible.contains(ss)){
							visible = visible + "," + ss;
						}
					}
					casher.setVisible(visible);
				}

				String names = StringKit.isNotBlank(ca.getSelectname())?ca.getSelectname():"";
				if(StringKit.isNotBlank(addname)){
					List<String> strings = Arrays.asList(addname.split(","));
					for(String ss:strings){
						if(!names.contains(ss)){
							names = names + " " + ss;
						}
					}
					casher.setSelectname(names);
					casher.setId(cid);
				}

				Casherlog casherlog = new Casherlog();
				casherlog.setU_id((int)ShiroKit.getUser().getId());
				casherlog.setDate(new Date());
				casherlog.setC_id(cid);
				casherlog.setIspass(3);
				casherlog.setOpinion(getPara("opinion",""));
				Blade.create(Casherlog.class).save(casherlog);
			}
		}
		boolean temp = service.update(casher);
		if (temp) {
			renderJson(success(UPDATE_SUCCESS_MSG));
		} else {
			renderJson(error(UPDATE_FAIL_MSG));
		}
	}

	public void remove() {
		String ids = getPara("ids");
		int cnt = service.deleteByIds(ids);
		if (cnt > 0) {
			renderJson(success(DEL_SUCCESS_MSG));
		} else {
			renderJson(error(DEL_FAIL_MSG));
		}
	}
}
