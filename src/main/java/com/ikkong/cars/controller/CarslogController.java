package com.ikkong.cars.controller;

import java.util.Date;
import java.util.Map;

import com.ikkong.cars.model.Cars;
import com.ikkong.core.base.BaseController;
import com.ikkong.core.dao.Blade;
import com.ikkong.core.jfinal.ext.kit.JsonKit;
import com.ikkong.core.jfinal.ext.shiro.ShiroKit;
import com.ikkong.core.toolbox.Record;
import com.ikkong.system.controller.base.UrlPermissController;
import com.ikkong.cars.model.Carslog;
import com.ikkong.cars.service.CarslogService;
import com.ikkong.cars.service.impl.CarslogServiceImpl;

/**
 * Generated by Blade.
 * 2018-08-17 09:07:58
 */
public class CarslogController extends UrlPermissController {
	private static String CODE = "carslog";
	private static String PERFIX = "nsl_carslog";
	private static String LIST_SOURCE = "Carslog.list";
	private static String BASE_PATH = "/platform/carslog/";
	
	CarslogService service = new CarslogServiceImpl();
	
	public void index() {
		setAttr("code", CODE);
		render(BASE_PATH + "carslog.html");
	}

	public void add() {
		setAttr("code", CODE);
		render(BASE_PATH + "carslog_add.html");
	}

	public void edit() {
		String id = getPara(0);
		Map carslog = Blade.dao().selectSingle("Carslog.one", Record.create().set("id", id), Map.class);

//		Carslog carslog = service.findById(id);
		setAttr("model", JsonKit.toJson(carslog));
		setAttr("id", id);
		setAttr("code", CODE);
		render(BASE_PATH + "carslog_edit.html");
	}

	public void view() {
		String id = getPara(0);
		Carslog carslog = service.findById(id);
		setAttr("model", JsonKit.toJson(carslog));
		setAttr("id", id);
		setAttr("code", CODE);
		render(BASE_PATH + "carslog_view.html");
	}

	public void list() {
		Object grid = paginate(LIST_SOURCE);
		renderJson(grid);
	}

	public void save() {
		Carslog carslog = mapping(PERFIX, Carslog.class);
		carslog.setP_id((int)ShiroKit.getUser().getId());
		if(carslog.getStart() == null){
			carslog.setStart(new Date());
		}
		if(carslog.getOver() == null){
			carslog.setOver(carslog.getStart());
		}

        Cars car = Blade.create(Cars.class).findById(carslog.getC_id());
        car.setStatus(2);
        Blade.create(Cars.class).update(car);
        boolean temp = service.save(carslog);
		if (temp) {
			renderJson(success(SAVE_SUCCESS_MSG));
		} else {
			renderJson(error(SAVE_FAIL_MSG));
		}
	}

	public void update() {
		Carslog carslog = mapping(PERFIX, Carslog.class);
		boolean temp = service.update(carslog);
		if (temp) {
			renderJson(success(UPDATE_SUCCESS_MSG));
		} else {
			renderJson(error(UPDATE_FAIL_MSG));
		}
	}

	public void remove() {
		String ids = getPara("ids");
		int cnt = service.deleteByIds(ids);
		if (cnt > 0) {
			renderJson(success(DEL_SUCCESS_MSG));
		} else {
			renderJson(error(DEL_FAIL_MSG));
		}
	}
}
