package com.ikkong.cars.controller;

import java.util.List;
import java.util.Map;
import com.ikkong.core.base.BaseController;
import com.ikkong.core.dao.Blade;
import com.ikkong.core.jfinal.ext.kit.JsonKit;
import com.ikkong.core.jfinal.ext.shiro.ClearShiro;
import com.ikkong.system.controller.base.UrlPermissController;
import com.ikkong.cars.model.Cars;
import com.ikkong.cars.service.CarsService;
import com.ikkong.cars.service.impl.CarsServiceImpl;
import org.apache.shiro.authz.annotation.RequiresUser;

/**
 * Generated by Blade.
 * 2018-08-17 09:07:58
 */
public class CarsController extends UrlPermissController {
	private static String CODE = "cars";
	private static String PERFIX = "nsl_cars";
	private static String LIST_SOURCE = "Cars.list";
	private static String BASE_PATH = "/platform/cars/";
	
	CarsService service = new CarsServiceImpl();
	
	public void index() {
		setAttr("code", CODE);
		render(BASE_PATH + "cars.html");
	}

	public void add() {
		setAttr("code", CODE);
		render(BASE_PATH + "cars_add.html");
	}

	public void edit() {
		String id = getPara(0);
		Cars cars = service.findById(id);
		setAttr("model", JsonKit.toJson(cars));
		setAttr("id", id);
		setAttr("code", CODE);
		render(BASE_PATH + "cars_edit.html");
	}

	public void view() {
		String id = getPara(0);
		Cars cars = service.findById(id);
		setAttr("model", JsonKit.toJson(cars));
		setAttr("id", id);
		setAttr("code", CODE);
		render(BASE_PATH + "cars_view.html");
	}

	public void list() {
		Object grid = paginate(LIST_SOURCE);
		renderJson(grid);
	}

	@ClearShiro
	@RequiresUser
	public void allcar() {

        List<Map> allcar = Blade.dao().select("Cars.list", Map.class, null);
        setAttr("allcar",allcar);
        render(BASE_PATH + "allcars.html");
	}

    @ClearShiro
    @RequiresUser
    public void choose() {

        List<Map> allcar = Blade.dao().select("Cars.list", Map.class, null);
        setAttr("allcar",allcar);
        render(BASE_PATH + "carchoose.html");
    }

	public void save() {
		Cars cars = mapping(PERFIX, Cars.class);
		cars.setStatus(1);
		boolean temp = service.save(cars);
		if (temp) {
			renderJson(success(SAVE_SUCCESS_MSG));
		} else {
			renderJson(error(SAVE_FAIL_MSG));
		}
	}

	public void update() {
		Cars cars = mapping(PERFIX, Cars.class);
		boolean temp = service.update(cars);
		if (temp) {
			renderJson(success(UPDATE_SUCCESS_MSG));
		} else {
			renderJson(error(UPDATE_FAIL_MSG));
		}
	}

	public void remove() {
		String ids = getPara("ids");
		int cnt = service.deleteByIds(ids);
		if (cnt > 0) {
			renderJson(success(DEL_SUCCESS_MSG));
		} else {
			renderJson(error(DEL_FAIL_MSG));
		}
	}
}
