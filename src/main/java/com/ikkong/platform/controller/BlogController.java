package com.ikkong.platform.controller;

import cn.afterturn.easypoi.excel.ExcelExportUtil;
import cn.afterturn.easypoi.excel.ExcelImportUtil;
import cn.afterturn.easypoi.excel.entity.ImportParams;
import cn.afterturn.easypoi.excel.entity.TemplateExportParams;
import com.ikkong.cars.model.Carslog;
import com.ikkong.common.vo.User;
import com.ikkong.core.dao.Blade;
import com.ikkong.core.jfinal.ext.kit.JsonKit;
import com.ikkong.core.jfinal.ext.shiro.ClearShiro;
import com.ikkong.core.jfinal.ext.shiro.ShiroKit;
import com.ikkong.core.toolbox.Record;
import com.ikkong.files.model.Fileslog;
import com.ikkong.files.model.Filesvislog;
import com.ikkong.platform.meta.intercept.BlogIntercept;
import com.ikkong.platform.model.Blog;
import com.ikkong.platform.model.Notice;
import com.ikkong.platform.service.BlogService;
import com.ikkong.platform.service.impl.BlogServiceImpl;
import com.ikkong.system.controller.base.UrlPermissController;
import com.ikkong.system.model.Dept;
import com.ikkong.system.util.CommonUtil;
import com.jfinal.kit.PathKit;
import com.jfinal.upload.UploadFile;
import org.apache.poi.hssf.record.RecalcIdRecord;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.shiro.authz.annotation.RequiresUser;
import org.beetl.sql.core.kit.StringKit;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.*;

/**
 * Generated by Blade.
 * 2016-10-08 15:59:45
 */
public class BlogController extends UrlPermissController {
	private static String CODE = "blog";
	private static String PERFIX = "tb_tfw_blog";
	private static String LIST_SOURCE = "Blog.list";
	private static String BASE_PATH = "/platform/blog/";
	
	BlogService service = new BlogServiceImpl();

	@ClearShiro
    @RequiresUser
	public void index() {
        String fid = getPara("fid","29");

        List<Filesvislog> filesvis = Blade.dao().select("Blog.vislog", Filesvislog.class, Record.create().set("fid", fid));
		List li = new ArrayList();
        if(filesvis.size()>0){
			Map first = new HashMap();
			first.put("pid",-1);
			Filesvislog fl = Blade.create(Filesvislog.class).findFirstBy(" f_id = " + fid + " order by id asc", Filesvislog.class);

			first.put("id",0);
			first.put("EmpName",Blade.dao().selectSingle("Blog.oneuser", Record.create().set("uid", filesvis.get(0).getU_id()), String.class));
			first.put("EmpPhoto","/static/lct/read.png");
			li.add(first);
		}


        for(Filesvislog f :filesvis){
            Integer u_id = f.getU_id();
            Integer id = f.getId();
            String  user = f.getAfterid();
            int pid = f.getP_id();
            Filesvislog firstp = Blade.create(Filesvislog.class).findFirstBy(" u_id = " + u_id + " and f_id = "+fid+" order by id asc", Filesvislog.class);
            int pp = firstp.getId();

            List<Object> review = Blade.create(Fileslog.class).findBy("u_id = " + user + " and ispass = 2 and f_id = " + fid, Fileslog.class);
            List<Object> see = Blade.create(Fileslog.class).findBy("u_id = " + user + " and ispass = 1 and f_id = " + fid, Fileslog.class);
            int ispass = 0;
            if(review.size()>0){
                ispass = 2;
            }else if(review.size()<1 && see.size()>0){
                ispass = 1;
            }


            String afterid = f.getAfterid();
            if(StringKit.isNotBlank(afterid)){
                List<String> strings = Arrays.asList(afterid.split(","));
				for(String ss :strings){
					if(StringKit.isNotBlank(ss)){
                        String uname = Blade.dao().selectSingle("Blog.oneuser", Record.create().set("uid", ss), String.class);
                        Map newmap = new HashMap();
                        newmap.put("pid",pid+"");
                        newmap.put("id",id);
                        newmap.put("EmpName",uname);
                        if(ispass == 1){
                            newmap.put("EmpPhoto","/static/lct/see.png");
                        }else if(ispass ==2){
                            newmap.put("EmpPhoto","/static/lct/read.png");
                        }else{
							newmap.put("EmpPhoto","/static/lct/nodone.png");
						}

                        li.add(newmap);
                    }
				}
            }
        }





//
//
//		Map mm = new HashMap();
//		Map ss = new HashMap();
//		ss.put("customParam",mm);
//		mm.put("EmpName","bbb");
//		mm.put("EmpPhoto","/static/lct/read.png");
//		mm.put("id",3);
//		mm.put("pid",1);
//
//		Map map = new HashMap();
//		map.put("EmpName","aaa");
//		map.put("EmpPhoto","/static/lct/read.png");
//		map.put("id",1);
//		map.put("pid",0);
//
//		Map map1 = new HashMap();
//		map1.put("EmpName","aaa11111");
//		map1.put("EmpPhoto","/static/lct/read.png");
//		map1.put("pid",1);
//		map1.put("id",4);
//
//
//		li.add(mm);
//		li.add(map);
//		li.add(map1);
		setAttr("list",JsonKit.toJson(li));
		setAttr("code", CODE);
		render(BASE_PATH + "blog.html");
	}

	public void add() {
		setAttr("code", CODE);
		render(BASE_PATH + "blog_add.html");
	}

	@ClearShiro
	public void toexcel(){
		render(BASE_PATH + "upload.html");
	}
	@ClearShiro
	public void excel(){
		UploadFile file = getFile("file");
		ImportParams params = new ImportParams();
		params.setTitleRows(1);
		params.setHeadRows(1);
		int up = 0;
		int sav = 0;
		String path = file.getUploadPath()+"\\"+file.getFileName();
		File f = new File(path);
		List<User> list = ExcelImportUtil.importExcel(f,User.class, params);
		renderJson(list);
	}
    @ClearShiro
	@RequiresUser
    public void carout(){
        String start = getPara("start");
        String over = getPara("over");
        String webRootPath = PathKit.getWebRootPath();
        TemplateExportParams params = new TemplateExportParams("book.xls");
        Map<String, Object> map = new HashMap<String, Object>();
        List<Map> list = Blade.dao().select("Carslog.bytime", Map.class, Record.create().set("start", start).set("over", over));

        for(int i = 0;i<list.size();i++){
            Map m = list.get(i);
            m.put("sid",i+1);
            String week = m.get("week").toString();
            if(StringKit.isNotBlank(week)){
                m.put("week",Integer.parseInt(week));
            }
        }

        map.put("start",start);
        map.put("over",over);
        map.put("maplist", list);
        Workbook workbook = ExcelExportUtil.exportExcel(params, map);

        File savefile = new File(webRootPath+"/upload/");
        if (!savefile.exists()) {
            savefile.mkdirs();
        }
        try {
            FileOutputStream fos = new FileOutputStream(savefile+"/excel.xls");
            workbook.write(fos);
            fos.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        renderFile("excel.xls","出车记录.xls");
    }


	@ClearShiro
	public void num() {
		String userid = getPara(0);
		String userlike = "%"+userid + "%";
		setAttr("uid",userid);
		List<Map> index = Blade.dao().select("Files.index", Map.class, Record.create().set("uidlike", userlike).set("uid",userid));
		int  ss = index.size();
		renderJson(ss);
	}

	@ClearShiro
	public void tonum() {
		String userid = getPara(0);
		String userlike = "%"+userid + "%";
		setAttr("uid",userid);
		List<Map> index = Blade.dao().select("Files.index", Map.class, Record.create().set("uidlike", userlike).set("uid",userid));
		int  ss = index.size();
		setAttr("num",ss);
		setAttr("code",CODE);
		render(BASE_PATH + "num.html");
	}

	@ClearShiro
	@RequiresUser
	public void lct() {
		Map mm = new HashMap();
		Map map = new HashMap();
		map.put("EmpName","aaa");
		map.put("EmpPhoto","/static/lct/read.png");
		mm.put("customParam",mm);
		renderJson(map);
	}

	public void edit() {
		String id = getPara(0);
		Blog blog = service.findById(id);
		setAttr("model", JsonKit.toJson(blog));
		setAttr("id", id);
		setAttr("code", CODE);
		render(BASE_PATH + "blog_edit.html");
	}

	public void view() {
		String id = getPara(0);
		Blog blog = service.findById(id);
		setAttr("model", JsonKit.toJson(blog));
		setAttr("id", id);
		setAttr("code", CODE);
		render(BASE_PATH + "blog_view.html");
	}

	public void list() {
		Object grid = paginate(LIST_SOURCE,new BlogIntercept());
		renderJson(grid);
	}

	public void save() {
		Blog blog = mapping(PERFIX, Blog.class);
		boolean temp = service.save(blog);
		if (temp) {
			renderJson(success(SAVE_SUCCESS_MSG));
		} else {
			renderJson(error(SAVE_FAIL_MSG));
		}
	}

	public void update() {
		Blog blog = mapping(PERFIX, Blog.class);
		blog.setVersion(blog.getVersion()+1);
		boolean temp = service.update(blog);
		if (temp) {
			renderJson(success(UPDATE_SUCCESS_MSG));
		} else {
			renderJson(error(UPDATE_FAIL_MSG));
		}
	}

	public void remove() {
		String ids = getPara("ids");
		int cnt = service.deleteByIds(ids);
		if (cnt > 0) {
			renderJson(success(DEL_SUCCESS_MSG));
		} else {
			renderJson(error(DEL_FAIL_MSG));
		}
	}
}
