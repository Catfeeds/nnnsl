
package com.ikkong.files.controller;

import java.io.File;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.*;

import com.alibaba.fastjson.JSONObject;
import com.ikkong.casher.model.Casher;
import com.ikkong.casher.model.Casherlog;
import com.ikkong.common.vo.User;
import com.ikkong.core.base.BaseController;
import com.ikkong.core.dao.Blade;
import com.ikkong.core.jfinal.ext.kit.JsonKit;
import com.ikkong.core.jfinal.ext.shiro.ClearShiro;
import com.ikkong.core.jfinal.ext.shiro.ShiroKit;
import com.ikkong.core.modules.beetl.ShiroExt;
import com.ikkong.core.toolbox.Record;
import com.ikkong.files.model.Fileslog;
import com.ikkong.files.model.Filesvislog;
import com.ikkong.system.controller.base.UrlPermissController;
import com.ikkong.files.model.Files;
import com.ikkong.files.service.FilesService;
import com.ikkong.files.service.impl.FilesServiceImpl;
import com.ikkong.system.util.CommonUtil;
import com.jfinal.upload.UploadFile;
import org.apache.poi.hssf.record.BookBoolRecord;
import org.apache.shiro.authz.annotation.RequiresUser;
import org.beetl.sql.core.kit.StringKit;

import javax.swing.text.BadLocationException;

/**
 * Generated by Blade.
 * 2018-07-16 10:24:02
 */
public class FilesController extends UrlPermissController {
	private static String CODE = "files";
	private static String PERFIX = "nsl_files";
	private static String LIST_SOURCE = "Files.list";
	private static String BASE_PATH = "/platform/files/";
	
	FilesService service = new FilesServiceImpl();
	
	public void index() {
		setAttr("code", CODE);
        setAttr("uid",ShiroKit.getUser().getId().toString());
		render(BASE_PATH + "files.html");
	}
    public void zhixing() {
        setAttr("code", CODE);
        setAttr("uid",ShiroKit.getUser().getId().toString());
        render(BASE_PATH + "files_zhixing.html");
    }

    public void sp() {
        setAttr("code", CODE);
        setAttr("uid",ShiroKit.getUser().getId().toString());
        setAttr("admin", CommonUtil.ynsuper());
        render(BASE_PATH + "files_sp.html");
    }

    public void round() {
        setAttr("code", CODE);
        setAttr("uid",ShiroKit.getUser().getId().toString());
        setAttr("admin", CommonUtil.ynsuper());
        render(BASE_PATH + "files_round.html");
    }

    //审批详情页
    public void splog() {
        int id = getParaToInt(0,1);
        Files files = service.findById(id);
        if(files != null && StringKit.isNotBlank(files.getTitle_o())){
            List<String> strings = Arrays.asList(files.getTitle_o().split(","));
            setAttr("filetitle",strings);
        }

        //所有可见人流程
        List<Map> visible = Blade.dao().select("Files.visible", Map.class, Record.create().set("fid", id));

        List maplist  = new ArrayList();
        for(Map m:visible){
            String after = m.get("after").toString();
            String u_id = m.get("before").toString();
            if(StringKit.isNotBlank(after)){
                List<String> strings = Arrays.asList(after.split(" "));
                for(String ss:strings){
                    if(StringKit.isNotBlank(ss)){
                        Map map = new HashMap();
                        map.put("uid",u_id);
                        map.put("name",ss);
                        maplist.add(map);
                    }
                }
            }
        }
        setAttr("visuser",maplist);



        //将回复状态归零
        boolean b = Blade.create(Fileslog.class).updateBy("version = 2", " f_id= "+id+" AND u_id = " + (int)ShiroKit.getUser().getId(), Boolean.class);
        //查看日志
        Fileslog fileslog = new Fileslog();
        fileslog.setF_id(id);
        fileslog.setU_id((int)ShiroKit.getUser().getId());
        fileslog.setIspass(1);
        Blade.create(Fileslog.class).save(fileslog);

        if(files.getU_id() == (int)ShiroKit.getUser().getId()){
            setAttr("mine",true);
        }
        User user = Blade.create(User.class).findById(files.getU_id());
        setAttr("uname",user.getName());
        setAttr("discript",StringKit.isNotBlank(files.getDiscript())?files.getDiscript():"暂无正文补充");
        List<Map> logs = Blade.dao().select("Files.splog", Map.class, Record.create().set("fid", id).set("uid",ShiroKit.getUser().getId()));
        setAttr("size",logs.size());
        setAttr("sps",logs);
        setAttr("status",files.getStatus());
        setAttr("code", "fileslog");
        setAttr("fid",id);
        setAttr("admin", CommonUtil.ynsuper());
        render(BASE_PATH + "../fileslog/splog.html");
    }

    //回复审阅意见
    public void review() {
        setAttr("code",CODE);
        String splogid = getPara("splogid", "1");
        setAttr("splogid",splogid);
        render(BASE_PATH + "../fileslog/review.html");
    }

    public void roundopinion() {
	    setAttr("code",CODE);
        String id = getPara("id");
        setAttr("model",null);
        setAttr("fid",id);
        render(BASE_PATH + "round_opinion.html");
    }

    public void reviewround() {
        Fileslog bean = mapping("nsl_files_log", Fileslog.class);
        bean.setDate(new Date());
        bean.setU_id((int)ShiroKit.getUser().getId());
        boolean temp = Blade.create(Fileslog.class).save(bean);
        if (temp) {
            renderJson(success(SAVE_SUCCESS_MSG));
        } else {
            renderJson(error(SAVE_FAIL_MSG));
        }
    }

    public void roundlog() {
        String id = getPara(0);
        List<String> readnames = Blade.dao().select("Files.read", String.class, Record.create().set("fid", id));

        Files files = service.findById(id);

        String visiable = files.getSelectname();
        List noread = new ArrayList();
        if(StringKit.isNotBlank(visiable)){
            for(String ss:readnames){
                visiable = visiable.replaceAll(ss, "");
            }
            visiable=visiable.replaceAll("系统管理员","");
            if(StringKit.isNotBlank(visiable)){
                List<String> strings = Arrays.asList(visiable.split(" "));
                for(String notr:strings){
                    if(StringKit.isNotBlank(notr)){
                        noread.add(notr);
                    }
                }
            }
        }
        setAttr("readnames",readnames);
        setAttr("noreadnames",noread);
        setAttr("status",files.getStatus());
        setAttr("code", "fileslog");
        setAttr("fid",id);
        setAttr("admin", CommonUtil.ynsuper());
        render(BASE_PATH + "../fileslog/roundlog.html");
    }



    public void opinion() {

        String mode = getPara("mode", "");
        if(!mode.equals("bx")){//文件审批
            setAttr("code", "casherlog");
            String id = getPara("id", "");
            setAttr("fid",id);
            Files files = Blade.create(Files.class).findById(id);
            String next  =  "未选择";
            String nextid = "未选择";
            if(files!=null&&StringKit.isNotBlank(files.getSelectname())){
                next = files.getSelectname();
            }
            if(files!=null&&StringKit.isNotBlank(files.getVisiable())){
                nextid = files.getVisiable();
            }
            Map map = Blade.dao().selectSingle("Fileslog.isexist", Record.create().set("fid", id).set("uid", ShiroKit.getUser().getId()), Map.class);
            if(map != null){
                map.put("next",next);
                map.put("nextid",nextid);
            }

            setAttr("model", JsonKit.toJson(map));
        }else{//报销审批
            setAttr("code", "fileslog");
            String id = getPara("id", "");
            setAttr("fid",id);
            Casher files = Blade.create(Casher.class).findById(id);
            String next  =  "未选择";
            String nextid = "未选择";
            if(files!=null&&StringKit.isNotBlank(files.getSelectname())){
                next = files.getSelectname();
            }
            if(files!=null&&StringKit.isNotBlank(files.getVisible())){
                nextid = files.getVisible();
            }
            Map map = Blade.dao().selectSingle("Casherlog.isexist", Record.create().set("cid", id).set("uid", ShiroKit.getUser().getId()), Map.class);
            if(map != null){
                map.put("next",next);
                map.put("nextid",nextid);
            }
            setAttr("mode",1);
            setAttr("model", JsonKit.toJson(map));
        }
        render(BASE_PATH + "opinion.html");
    }
    public void subopinion() {
        Fileslog fileslog = mapping("nsl_files_log", Fileslog.class);

        boolean temp = false;
        Map mt = new HashMap();
        if(fileslog!= null && fileslog.getF_id()!=null){
            String next = getPara("nsl_files_log.next", "");
            String nextid = getPara("nsl_files_log.nextid", "");
            Files files = Blade.create(Files.class).findById(fileslog.getF_id());
            if(files==null){
                files = new Files();
            }
            String selectname = files.getSelectname();
            if(StringKit.isBlank(files.getSelectname())){
                selectname = "";
            }
            if(!selectname.contains(next)){
                selectname = selectname + " " + next;
            }

            String visiable = files.getVisiable();
            if(StringKit.isBlank(files.getVisiable())){
                visiable = "";
            }
            if(!visiable.contains(nextid)){
                visiable = visiable + " " + nextid;
            }
            files.setVisiable(visiable);
            files.setSelectname(selectname);
           if( fileslog.getIspass()!= null && fileslog.getIspass() == 3){
               if(ShiroKit.getUser().getRoleList().contains("13")){
                   files.setStatus(2);
               }else if(ShiroKit.getUser().getRoleList().contains("9")){
                   files.setStatus(3);
               }else if(ShiroKit.getUser().getRoleList().contains("8")){
                   files.setStatus(4);
               }

           }else if(fileslog.getIspass()!= null && fileslog.getIspass() == 2){
               if(ShiroKit.getUser().getRoleList().contains("13")){
                   files.setStatus(5);
               }else if(ShiroKit.getUser().getRoleList().contains("9")){
                   files.setStatus(6);
               }else if(ShiroKit.getUser().getRoleList().contains("8")){
                   files.setStatus(7);
               }
           }

           //报销审批意见
           if(fileslog.getVersion()!=null){
               Casherlog casherlog = new Casherlog();
               Casher casher = Blade.create(Casher.class).findById(fileslog.getF_id());
               casherlog.setC_id(fileslog.getF_id());
               casherlog.setU_id(fileslog.getU_id());
               casherlog.setOpinion(fileslog.getOpinion());
               casherlog.setDate(new Date());
               casherlog.setIspass(fileslog.getIspass());
               casherlog.setU_id((int)ShiroKit.getUser().getId());
               casher.setSelectname(files.getSelectname());

               String vc = casher.getVisible();
               if(StringKit.isBlank(casher.getVisible())){
                   vc = "";
               }
               if(!vc.contains(nextid)){
                   vc = vc + " " + nextid;
               }
               casher.setVisible(vc);


               if( fileslog.getIspass()!= null && fileslog.getIspass() == 3){
                   if(ShiroKit.getUser().getRoleList().contains("13")){//部门领导
                       casher.setStatus(2);
                   }else if(ShiroKit.getUser().getRoleList().contains("11")){//财务初审
                       casher.setStatus(3);
                   }else if(ShiroKit.getUser().getRoleList().contains("9")){//领导班子
                       casher.setStatus(4);
                   }else if(ShiroKit.getUser().getRoleList().contains("8")){//总经理
                       casher.setStatus(5);
                   }else if(ShiroKit.getUser().getRoleList().contains("12")){//财务终审
                       casher.setStatus(6);
                   }

               }else if(fileslog.getIspass()!= null && fileslog.getIspass() == 2){
                   if(ShiroKit.getUser().getRoleList().contains("13")){//部门领导
                       casher.setStatus(8);
                   }else if(ShiroKit.getUser().getRoleList().contains("11")){//财务初审
                       casher.setStatus(9);
                   }else if(ShiroKit.getUser().getRoleList().contains("9")){//领导班子
                       casher.setStatus(10);
                   }else if(ShiroKit.getUser().getRoleList().contains("8")){//总经理
                       casher.setStatus(11);
                   }else if(ShiroKit.getUser().getRoleList().contains("12")){//财务终审
                       casher.setStatus(12);
                   }
               }


               temp =  Blade.create(Casherlog.class).save(casherlog);
               temp =  Blade.create(Casher.class).update(casher);


           }else {
               temp = Blade.create(Files.class).update(files);
               mt.put("fid",fileslog.getF_id());
               mt.put("uid", ShiroKit.getUser().getId());
               fileslog.setU_id((int)ShiroKit.getUser().getId());
               fileslog.setDate(new Date());
               temp = Blade.create(Fileslog.class).save(fileslog);
           }
        }
        if (temp) {
            renderJson(success(SAVE_SUCCESS_MSG));
        } else {
            renderJson(error(SAVE_FAIL_MSG));
        }
    }

	public void add() {
	    setAttr("round",getPara("round","0"));
		setAttr("code", CODE);
		render(BASE_PATH + "files_add.html");
	}

//    public void doman() {
//        String fid = getPara("fid", "1");
//        String copyman = getPara("copyman");
//        String copy = getPara("copy");
//        Files files = new Files();
//        render(BASE_PATH + "files_add.html");
//    }

	public void edit() {
		String id = getPara(0);
		Files files = service.findById(id);
		if(files != null && files.getIssubmit()==1 ){
		    if(files.getStatus()<5 || files.getStatus()>7){
                render(BASE_PATH + "noedit.html");
                return;
            }
        }
		setAttr("files",files);
		setAttr("model", JsonKit.toJson(files));
		setAttr("id", id);
		setAttr("code", CODE);
		render(BASE_PATH + "files_edit.html");
	}

	public void view() {
		String id = getPara(0);
//		Files files = service.findById(id);
        Map files = Blade.dao().selectSingle("Files.one", Record.create().set("id", id), Map.class);
        setAttr("model", JsonKit.toJson(files));
		setAttr("id", id);
		setAttr("code", CODE);
		render(BASE_PATH + "files_view.html");
	}



	public void list()  throws UnsupportedEncodingException {
        Object grid = paginate(LIST_SOURCE);
		renderJson(grid);
	}

    @ClearShiro
    @RequiresUser
    public void submm() {
        int id = getParaToInt("id",1);
        int status = getParaToInt("status",1);
        Files files = new Files();
        files.setIssubmit(1);
        files.setStatus(status);
        files.setId(id);
        boolean temp = service.update(files);
        if (temp) {
            renderJson(success(SAVE_SUCCESS_MSG));
        } else {
            renderJson(error(SAVE_FAIL_MSG));
        }
    }

    @ClearShiro
    @RequiresUser
    public  void downs() throws UnsupportedEncodingException {

        String file = getPara("file");
        file = URLDecoder.decode(file,"utf-8");

        if(StringKit.isNotBlank(file)){
            file = file.replaceAll("：","");
            file = file.replaceAll(":","");
            renderFile(file);
        }else {
            renderText("没有找到此文件");
        }

    }

    @ClearShiro
    @RequiresUser
	public void upload() {
        String fileName = "";
        boolean flag = false;
        String msg = "";
        try {
            UploadFile avatar = getFile();
            File file = avatar.getFile();
            fileName = file.getName();
            fileName = fileName.replace("：","");
            boolean b = file.renameTo(new File(avatar.getUploadPath(), fileName));
//			boolean delete = file.delete();
            msg = "success";
            flag = true;
        }catch (Exception e) {
            msg = "网络超时，请重试。";
        }

        JSONObject json = new JSONObject();
        json.put("flag", flag);
        json.put("msg", msg);
        json.put("fileName", fileName);
        renderJson(json);
    }

	public void save() {

		Files files = mapping(PERFIX, Files.class);
//		files.setVisiable(files.getVisiable()+",10001,"+ShiroKit.getUser().getId().toString());///
		files.setDate(new Date());
		files.setD_id((int)ShiroKit.getUser().getDeptId());
		files.setU_id((int)ShiroKit.getUser().getId());
		files.setStatus(99);
		files.setIssubmit(0);
		boolean temp = service.save(files);
		String vis = files.getVisiable();

        Files first = service.findFirstBy("1 = 1 order by id desc", Files.class);
        int fid = first.getId();
        Filesvislog filesvislog = new Filesvislog();
        filesvislog.setF_id(fid);
        filesvislog.setP_id(0);
        filesvislog.setU_id((int)ShiroKit.getUser().getId());
        filesvislog.setBeforid("");
        filesvislog.setBefor("");
        filesvislog.setAfter(files.getSelectname());
        filesvislog.setDate(new Date());

        if(StringKit.isNotBlank(vis)){
            List<String> strings = Arrays.asList(vis.split(","));
            for(String ss:strings){
                if(StringKit.isNotBlank(ss)){
                    filesvislog.setAfterid(ss);
                    Blade.create(Filesvislog.class).save(filesvislog);
                }
            }
        }



        if (temp) {
			renderJson(success(SAVE_SUCCESS_MSG));
		} else {
			renderJson(error(SAVE_FAIL_MSG));
		}
	}



	public void update() {
        boolean temp = false;
        String mode = getPara("mode", "");
        if("addman".equals(mode)){//加签
            Integer fid = getParaToInt("fid", 1);
            String addids = getPara("addids");
            String addname = getPara("addname");
            Files files = service.findById(fid);
            if(files!=null){
                String vis = files.getVisiable()!=null?files.getVisiable():"";
                String sname =files.getSelectname()!=null?files.getSelectname():"";
               String  avis  = vis + "," + addids;
                String asname = sname + " " + addname;
                files.setSelectname(asname);
                files.setVisiable(avis);
                service.update(files);

                //权限设置记录
                if(StringKit.isNotBlank(toString())){
                    int uid = (int)ShiroKit.getUser().getId();
                    Filesvislog filesvislog = new Filesvislog();
                    filesvislog.setF_id(fid);
                    filesvislog.setU_id(uid);
                    filesvislog.setDate(new Date());
                    filesvislog.setBefor(sname);
                    filesvislog.setBeforid(vis);
                    filesvislog.setAfter(addname);

                    Filesvislog fl = Blade.create(Filesvislog.class).findFirstBy("  f_id = " + fid + " and  afterid = " + uid + " order by id desc", Filesvislog.class);
                    if(fl!=null){
                        filesvislog.setP_id(fl.getId());
                    }else {
                        Filesvislog fv = Blade.create(Filesvislog.class).findFirstBy("  f_id = " + fid + "  order by id desc", Filesvislog.class);
                        if(fv!=null){
                            filesvislog.setP_id(fv.getId());
                        }else {
                            filesvislog.setP_id(0);
                        }
                    }



                    List<String> strings = Arrays.asList(addids.split(","));
                    for(String ss:strings){
                        if(StringKit.isNotBlank(ss)){
                            filesvislog.setAfterid(ss);
                            temp = Blade.create(Filesvislog.class).save(filesvislog);
                        }
                    }
                }



            }else {
                renderJson(error("选择失败"));
                return;
            }

        }else {//更新
            Files files = mapping(PERFIX, Files.class);
             temp = service.update(files);
        }


		if (temp) {
			renderJson(success(UPDATE_SUCCESS_MSG));
		} else {
			renderJson(error(UPDATE_FAIL_MSG));
		}
	}

	public void remove() {
		String ids = getPara("ids");
		int cnt = 0;
        int j = 0;
		if(StringKit.isNotBlank(ids)){
            List<String> strings = Arrays.asList(ids.split(","));
            for(String ss:strings){
                Files byId = service.findById(ss);
                if(byId.getIssubmit()==1){
                    j++;
                }else {
                    cnt = service.deleteByIds(ss);
                }
            }
        }


		if (cnt > 0) {
		    if(j>0){
                renderJson(success(DEL_FF_MSG));
            }else {
                renderJson(success(DEL_SUCCESS_MSG));
            }
		} else {
            if(j>0){
                renderJson(error(DEL_FF_MSG));
            }else {
                renderJson(error(DEL_FAIL_MSG));
            }

		}
	}
}
